{%- macro format_value(key, value) %}
  {%- if value is string %}
    '{{ value }}'
  {%- elif key in ['retry_delay', 'sla', 'execution_timeout'] and value is number %}
    timedelta(minutes={{ value }})
  {%- else %}
    {{ value }}
  {%- endif %}
{%- endmacro %}

{%- macro process_value(value, import_from_file, env_configs) %}
  {%- if value.startswith("cc_var_") %}
    {%- if import_from_file -%}
        env_configs.get('{{ value }}')
    {%- else -%}
        {{ env_configs[value]|tojson }}
    {%- endif %}
  {%- else -%}
        '{{ value }}' 
  {%- endif %}
{%- endmacro %}

{% macro render_task(task, config_values, env_configs) %}
    {{ task['task_id'] }} = {{ task['task_type'].split('.')[-1] }}(
        {%- for key, value in task.items() if key not in ('depends_on', 'task_type') %}
            {%- if value is string %}
                {%- if key == "python_callable" %}
        {{ key }} = {{ value }},
                {%- elif value.startswith("cc_var_") %}
        {{ key }} = {% if config_values.var_configs["import_from_file"] %}env_configs.get('{{ value }}'){% else %}{{ env_configs[value]|tojson }}{% endif %},
                {%- else %}
        {{ key }} = {{ value | tojson }},
                {%- endif %}
            {%- elif key == "op_kwargs" and value is mapping %}
        op_kwargs = {
            {%- for k, v in value.items() %}
            '{{ k }}': {{ process_value(v, config_values.var_configs.get("import_from_file"), env_configs) }},
            {%- endfor %}
        },
            {%- elif key == "op_args" and value is sequence %}
        op_args = [
            {%- for v in value %}
            {{ process_value(v, config_values.var_configs.get("import_from_file"), env_configs) }},
            {%- endfor %}
        ],
            {%- else %}
        {{ key }} = {{ value }},
            {%- endif %}
        {%- endfor %}
    )
{%- endmacro %}

{%- macro process_dependencies(item, all_task_ids) -%}
    {%- if item.depends_on %} 
        {%- for dependency in item.depends_on %}
            {%- if dependency not in all_task_ids %}
                {{ raise_exception("Dependency task not found: " ~ dependency) }}
            {%- else %}
    {{ dependency }} >> 
            {%- endif %}
        {%- endfor -%}
        {{ ' ' + (item.task_id or item.group_id) }}
    {%- endif %}
{%- endmacro -%}
