# Copyright 2024 Google LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     https://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import airflow
import yaml
import logging
from datetime import datetime, timedelta
from airflow.models import DAG
from typing import Any
from typing import Dict
from airflow.operators.dummy_operator import DummyOperator
from google.cloud import storage
from google.cloud import spanner

{%- from 'macros.template' import format_value, render_task_group, render_task %}

{%- if config_data['task_groups'] and config_data['task_groups'] is defined %}
from airflow.utils.task_group import TaskGroup
{%- endif %}

{#- Start: Contructs imports dynamically based on task_type #}
{%- set task_libraries = {} %} 

{%- for task in config_data['tasks'] %}
  {%- set key = ('.'.join(task['task_type'].split('.')[0:-1]), task['task_type'].split('.')[-1]) %}
  {%- if key not in task_libraries %}
    {%- set _ = task_libraries.update({key: None}) %} 
  {%- endif %}
{%- endfor %}

{%- if config_data.get('task_groups') and config_data['task_groups'] %}
    {%- for group in config_data['task_groups'] %}
    {%- for task in group['tasks'] %}
        {%- set key = ('.'.join(task['task_type'].split('.')[0:-1]), task['task_type'].split('.')[-1]) %}
        {%- if key not in task_libraries %}
        {%- set _ = task_libraries.update({key: None}) %} 
        {%- endif %}
    {%- endfor %}
    {%- endfor %}
{%- endif %}

{%- for (module, operator) in task_libraries.keys() %}
from {{ module }} import {{ operator }}
{%- endfor %}
{#- End #}

{%- set config_values = namespace() %}
{%- for key, value in framework_config_values.items() %}
{%- if key == "var_configs" %}
{%- set config_values.var_configs = value %}
{%- endif %}
{%- endfor %}


log = logging.getLogger("airflow")
log.setLevel(logging.INFO)

{% if config_values.var_configs["import_from_file"] == True and config_values.var_configs["file_name"] is defined -%}
composer_env_name = os.environ["COMPOSER_ENVIRONMENT"]
composer_env_bucket = os.environ["GCS_BUCKET"]
env_configs = {}

def load_config_from_gcs(bucket_name: str, source_blob_name: str) -> Dict[str, Any]:
    """Downloads a blob from the bucket."""
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(source_blob_name)
    blob.download_to_filename("config.yaml")
    with open("config.yaml") as f:
        config = yaml.safe_load(f)
    return config

run_time_config_data = load_config_from_gcs(
    bucket_name=composer_env_bucket,
    source_blob_name="dag_variables/{{ config_values.var_configs["file_name"] }}"
)

if type(run_time_config_data["{{ config_values.var_configs["environment"] }}"]) is dict:
    env_configs = run_time_config_data["{{ config_values.var_configs["environment"] }}"]


{%- elif config_values.var_configs["import_from_file"] == False %}
{%- set env_configs = config_values.var_configs["variables"] %}

{%- endif %}


{#- Start: Processes Python functions definition from the YAML #}
{%- if python_functions.add_functions %}
    {% for function_code in python_functions.functions %}

{{ function_code }}

    {%- endfor %}
{%- endif %}
{#- End #}


{#- Start: Contructs default_args dynamically #}
{%- set default_values = {
    "retries": 1,
    "retry_delay": 2,
    "sla": 55,
    "execution_timeout": 60
} %}

{%- set default_args = {} %}
{%- set all_keys = config_data['default_args'].keys() | list %}

{%- for key, value in config_data['default_args'].items() %}
  {%- if value is not none %}
    {%- set _ = default_args.update({key: value}) %}
  {%- endif %}
{%- endfor %}

{%- for key, value in default_values.items() %}
  {%- if key not in default_args and value is not none %}
    {%- set _ = default_args.update({key: value}) %}
  {%- endif %}
{%- endfor %}

{%- set all_keys = all_keys + (default_values.keys() | list) %}


default_args = {
{%- for i in range(all_keys | length) %}
  {%- set key = all_keys[i] %}
  {%- if default_args.get(key) is not none %}
    "{{ key }}": {{ format_value(key, default_args[key]) | trim }}{% if i < (all_keys | length - 1) %},{% endif %}
  {%- endif %}
{%- endfor %}
}
{#- End #}

dag = DAG(
    dag_id='{{ config_data["dag_id"] }}',
    default_args=default_args,
    schedule={{ (config_data.get("schedule") or config_data.get("schedule_interval")) | tojson if config_data.get("schedule") != "None" and config_data.get("schedule_interval") != "None" else None }},
    description='{{ config_data.get("description") }}',
    max_active_runs={{ config_data.get("max_active_runs") or 1 }},
    catchup={{ config_data.get("catchup", False) }},
    is_paused_upon_creation={{ config_data.get("is_paused_upon_creation", True) }},
    dagrun_timeout={{ config_data.get("dagrun_timeout") or "timedelta(hours=6)" }},
    tags={{ config_data.get("tags", ['composer-templates']) }},
    start_date={{ config_data.get("start_date") or "datetime(2024, 12, 1)" }},
    end_date={{ config_data.get("end_date") or "datetime(2024, 12, 1)" }},
    max_active_tasks={{ config_data.get("max_active_tasks") }}
)


with dag:
    {#- Start: Processes 'tasks' from YAML  #}
    {%- for task in config_data['tasks'] %}
        {{ render_task(task, config_values, env_configs) }}
    {%- endfor %}
    {#- End #}

    {#- Start: Processes 'task_groups' from YAML  #}
    {% if config_data.get('task_groups') and config_data['task_groups'] %}
    {#- {%- for group in config_data['task_groups'] %}
    with TaskGroup(group_id="{{ group.group_id }}") as {{ group.group_id }}:
        {%- for group_task in group.tasks %}
            {%- filter indent(4) %}
            {{- render_task(group_task, config_values, env_configs) }}
            {%- endfilter %}
        {% endfor %}
    {%- endfor %}
    {%- endif %} #}

    {% for group in config_data['task_groups'] %}
        {{ render_task_group(group, config_values, env_configs) }}
    {% endfor %}
    {%- endif %}
    {#- End #}

    {#- Start: Processes dependencies based on 'depends_on' from YAML  #}
    {% include 'dependencies.template' -%}
    {# End #}
