# Copyright 2024 Google LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     https://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import airflow
import yaml
import logging
from datetime import datetime, timedelta
from airflow.models import DAG
from typing import Any
from typing import Dict
from airflow.operators.dummy_operator import DummyOperator
from google.cloud import storage
from google.cloud import spanner


{%- set task_libraries = dict() %}

{%- for n in range(config_data['tasks']|length) %}
{%- set key = '.'.join(config_data['tasks'][n]['task_type'].split('.')[0:-1]) %}
{%- set value = '.'.join(config_data['tasks'][n]['task_type'].split('.')[-1:]) %}
{%- set _dummy = task_libraries.__setitem__(value,key) %}
{%- endfor %}

{%- for key,value in task_libraries.items() %}
from {{ value }} import {{ key }} 
{%- endfor %}

{%- set config_values = namespace() %}
{%- for key, value in framework_config_values.items() %}
{%- if key == "var_configs" %}
{%- set config_values.var_configs = value %}
{%- endif %}
{%- endfor %}

log = logging.getLogger("airflow")
log.setLevel(logging.INFO)

{%- if config_values.var_configs["import_from_file"] == True and config_values.var_configs["file_name"] is defined %}
composer_env_name = os.environ["COMPOSER_ENVIRONMENT"]
composer_env_bucket = os.environ["GCS_BUCKET"]
env_configs = {}

def load_config_from_gcs(bucket_name: str, source_blob_name: str) -> Dict[str, Any]:
    """Downloads a blob from the bucket."""
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(source_blob_name)
    blob.download_to_filename("config.yaml")
    with open("config.yaml") as f:
        config = yaml.safe_load(f)
    return config

run_time_config_data = load_config_from_gcs(
    bucket_name=composer_env_bucket,
    source_blob_name="dag_variables/{{ config_values.var_configs["file_name"] }}"
)

if type(run_time_config_data["{{ config_values.var_configs["environment"] }}"]) is dict:
    env_configs = run_time_config_data["{{ config_values.var_configs["environment"] }}"]


{%- elif config_values.var_configs["import_from_file"] == False %}
{% set env_configs = config_values.var_configs["variables"] %}

{%- endif %}

{%- if python_functions.add_functions %}
    {%- for function_code in python_functions.functions %}

{{ function_code }}

    {%- endfor %}
{%- endif %}

{%- set default_values = {
    "retries": 1,
    "retry_delay": 2,
    "sla": 55,
    "execution_timeout": 60
} %}

{%- macro format_value(key, value) %}
  {%- if value is string %}
    '{{ value }}'
  {%- elif key in ['retry_delay', 'sla', 'execution_timeout'] and value is number %}
    timedelta(minutes={{ value }})
  {%- else %}
    {{ value }}
  {%- endif %}
{%- endmacro %}

{%- set default_args = {} %}
{%- set all_keys = config_data['default_args'].keys() | list %}

{%- for key, value in config_data['default_args'].items() %}
  {%- if value is not none %}
    {%- set _ = default_args.update({key: value}) %}
  {%- endif %}
{%- endfor %}

{%- for key, value in default_values.items() %}
  {%- if key not in default_args and value is not none %}
    {%- set _ = default_args.update({key: value}) %}
  {%- endif %}
{%- endfor %}

{%- set all_keys = all_keys + (default_values.keys() | list) %}

default_args = {
{%- for i in range(all_keys | length) %}
  {%- set key = all_keys[i] %}
  {%- if default_args.get(key) is not none %}
    "{{ key }}": {{ format_value(key, default_args[key]) | trim }}{% if i < (all_keys | length - 1) %},{% endif %}
  {%- endif %}
{%- endfor %}
}

dag = DAG(
    dag_id='{{ config_data["dag_id"] }}',
    default_args=default_args,
    schedule='{{ config_data.get("schedule_interval") or config_data.get("schedule") or "@once" }}',
    description='{{ config_data.get("description") }}',
    max_active_runs={{ config_data.get("max_active_runs") or 1 }},
    catchup={{ config_data.get("catchup", False) }},
    is_paused_upon_creation={{ config_data.get("is_paused_upon_creation", True) }},
    dagrun_timeout={{ config_data.get("dagrun_timeout") or "timedelta(hours=6)" }},
    tags={{ config_data.get("tags", ['composer-templates']) }},
    start_date={{ config_data.get("start_date") or "datetime(2024, 12, 1)" }},
    end_date={{ config_data.get("end_date") or "datetime(2024, 12, 1)" }},
    max_active_tasks={{ config_data.get("max_active_tasks") }},
    is_paused_upon_creation={{ config_data.get("is_paused_upon_creation", True) }}
)

with dag:

    start = DummyOperator(task_id='start')

    {%- set item = namespace(value='start') %}
    {%- set depen_task_dct = dict() -%}

    {%- for n in range(config_data['tasks']|length) %}

    {{ config_data['tasks'][n]['task_id'] }} = {{ config_data['tasks'][n]['task_type'].split('.')[-1:][0] }} (
        {%- for key in config_data['tasks'][n].keys() %}
        {%- if key != 'depends_on' and key != 'task_type' %}
            {%- set value = config_data['tasks'][n][key] -%}
        {%- if value is string %}  
        {%- if key== "python_callable" %}
            {{ key }} = {{ value }},
        {%- else %}
        {%- if value[:7] != "cc_var_" %}
            {{ key }} = '{{ value }}',
        {%- else %}        
        {%- if config_values.var_configs["import_from_file"] == True %}
            {{ key }} = env_configs.get('{{ value }}'),
        {%- else %}
            {{ key }} = {{ env_configs[value]|tojson }},
        {%- endif %}
        {%- endif %}
        {%- endif %}
        {%- elif value is mapping and key == "op_kwargs" %}
        {%- set op_kwargs = {} %}
            op_kwargs ={
            {%- for key, value in value.items() %}
            {%- if value[:7] != "cc_var_" %}
            '{{ key }}' : '{{ value }}',
            {%- elif value[:7] == "cc_var_" and config_values.var_configs["import_from_file"] == False %}
            '{{ key }}' : {{ env_configs[value]|tojson }},
            {%- elif config_values.var_configs["import_from_file"] == True %}
            '{{ key }}': env_configs.get('{{ value }}'),
            {%- endif %}
            {%- endfor %}
            },
        {%- elif value is sequence and key == "op_args" %}
        {%- set op_args =[] %}
            op_args =[
            {%- for item in value %}
            {%- if item[:7] != "cc_var_" %}
            '{{ item }}',
            {%- elif item[:7] == "cc_var_" and config_values.var_configs["import_from_file"] == False %}
            {{ env_configs[item]|tojson }},
            {%- elif config_values.var_configs["import_from_file"] == True %}
            env_configs.get('{{ item }}'),
            {%- endif %}
            {%- endfor %}
            ],
        {%- else %}
            {{ key }} = {{ value }},
        {%- endif %}
        {%- endif %}
        {%- endfor %}
        )
    {%- set _ = depen_task_dct.update({config_data['tasks'][n]['task_id']: config_data['tasks'][n]['depends_on']}) -%}
    {%- endfor %}

    {%- set depen_task_group_dict = dict() -%}
    {%- for key, value in depen_task_dct.items() -%}
        {%- set _ = depen_task_group_dict.setdefault(value, []).append(key) -%}
    {%- endfor %}

    {%- set final_tasks_seq = [] -%}
    {%- for key, task in depen_task_group_dict.items() -%}
      {%- if task | length < 2 -%}
        {%- set new_task = task | first -%}
        {{ final_tasks_seq.append(new_task) or "" }}
      {%- elif task | length > 1 -%}
        {%- set new_task = "[" ~ task | join(",") ~"]"  -%}
        {{ final_tasks_seq.append(new_task) or "" }}
      {%- else -%}
        {{ "Unexpected error occurred" }}
      {%- endif -%}
    {%- endfor %}

    {%- if task_dependency['task_dependency_type'] == "custom" %}
    {% for dependency in task_dependency['task_dependency'] %}
    
    {{ dependency }}
    {%- endfor -%}
    {%- elif task_dependency['task_dependency_type'] == "default" %}
    
    {{ item.value ~ " >> " ~ final_tasks_seq|join(" >> ") }}
    {%- endif %}