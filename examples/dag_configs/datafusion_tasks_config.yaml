# Copyright 2024 Google LLC

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     https://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# DAG parameters
# mandatory
dag_id: datafusion_tasks_dag
description:
max_active_runs:
catchup: False
schedule_interval: "None"
tags: ["test"]
owner:


# mandatory
default_args:
  owner: 'test'
  retries:
  email_on_failure: False
  email_on_retry: False
  email:                          
  retry_delay: 1    # minutes


# Define Python functions to be added in your Airflow DAG
# - import_functions_from_file:  
#   - True:  Load functions from a local Python file (specify the 'file_path').
#   - False: Define functions directly within this YAML configuration.
# - functions: In-place code.
custom_python_functions:
  custom_defined_functions:
    # perform_transformation:
    #   description: Sample function as an example to perform custom transformation.
    #   code: |
    #     def transformation(data):
    #       """
    #       Sample function as an example to perform custom transformation.

    #       Args:
    #         data: Sample data on which we can perform any transformation.
          
    #       Returns:
    #         The data converted into a string format.
    #       """
    #       print("Printing sample payload from transformation function: {}".format(data))
    #       output = str(data)
    #       return output
    # pull_xcom:
    #   description: Function to pull xcom variables from export GCS task print or use it for other transformations.
    #   code: |
    #     def pull_xcom(**kwargs):
    #       """
    #       Pulls a value from XCom and prints it.
    #       """
    #       ti = kwargs['ti']
    #       pulled_value = str(ti.xcom_pull(task_ids='export_sales_reporting_table_to_gcs', key='file_details'))
    #       print(f"Pulled value from XCom: {pulled_value}")
    #       return pulled_value


# Tasks specific configs
# mandatory
tasks:
  #cc_operator_description: starts a datafusion pipeline
  - task_id: create_datafusion_pipeline
    task_type: airflow.providers.google.cloud.operators.datafusion.CloudDataFusionStartPipelineOperator
    pipeline_name: test
    instance_name: test1
    location: us-west1
    project_id: composer-templates-dev
    depends_on: None
    trigger_rule : 'none_failed'


task_dependency:
  default_task_dependency: True


task_variables:

